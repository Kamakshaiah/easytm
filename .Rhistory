a <- c(2, 3)
x <- c(1, 2, 3)
x_ <- solve(x)
x_ <- rev(x)
x_
t(x)%*%a%*%t(x_)
x%*%a%*%x_
x%*%a
x%*%t(a)
x%*%t(a)%*%x_
x%*%t(a)%*%t(x_)
(x%*%t(a)%*%)%*%x_
(x%*%t(a))%*%x_
t(x)%*%t(a))%*%t(x_)
t(x)%*%t(a)%*%t(x_)
x%*%t(a)%*%x_
x%*%t(a)
t(x)%*%a
t(x)%*%x_%*%a
a
a*x
a%*%x
a%*%t(x)
a%*%t(x)%*%x_
t(x)%*%a%*%x_
dim(neuromktgdf) # 283 299
neuromktgdf <- subset(neuromktdf, select = c(neuroscience, neurosciencebased, neurosciencediscussion, neuroscienceinspired,
neurosciences, neuroscientific, neuroscientists, nonneuroscience, neuromarketers,
neuromarketing, neuromarketings, psychophysiologicalneuromarketing, businessconsumer, consumer,
consumergrade, consumerpreferred, consumers, consumerstourists, consumerstyle,
individualconsumer, nonconsumer, producerconsumer, performance, performances,
outcome, outcomes, produce, produced, producer, producerconsumer, product,
productbenefit, production, productive, products, productservice, productspecific,
reproduced, reproducibility, reproduction, advertisement, advertisements, advertisers, advertising,
advertisingmarketing, neuroadvertisiment, neuroadvertising, communicate, communicating, communication,
communications, communicative, communities, community, neurocommunication, serviceâ.communication, telecommunications,
sale, sales, manage, managed, management, manager, managerial, managers, manages,
neuromanagement, designmethodologyapproach, method, methodical, methodological, methodologies,
methodology, methods, multimethodological, theorycontextcharacteristicsmethodology,
approach, approaches, approaching, approachwithdrawal, appropriate, appropriately,
appropriateness, approximately, approximation, designmethodologyapproach, inappropriate,
guide, guided, guideline, guidelines, policies, policy, policymakers,
trans, transaction, transcends, transcranial, transfer, transferable, transferred,
transfers, transform, transformation, transformative, transformed, transforming, translating,
translational, transmission, transmit, transparency, account, accountability, accounts,
audience, audiences, audio, audiovideo, audiovisual, auditory, conductinformed,
infodemiology, inform, informa, informacao, informacion, information,
informational, informations, informative, informed, informing, neuroinformatics, neurophysiologicallyinformed,
ecosystem, system, systematic, systematically, systemic, systems,
biotechnology, biotechnosocial, hightech, nanotechnologies, neurotechnological, neurotechnologies,
neurotechnology, nontechnical, tech, technical, technique, techniques,
technological, technologies, technologists, technology, crossdataset, data,
database, databases, datadriven, datamining, dataset, datasets, metadata, seogdata,
singledataset, analyse, analysed, analyses, analysing, analysis, analytic, analytical,
analytics, analyze, analyzed, analyzes, analyzing, metaanalyses, conscience, inderscience,
neuroscience, neurosciencebased, neurosciencediscussion, neuroscienceinspired, neurosciences,
nonneuroscience, science, sciencebusiness, sciencedirect, sciencedirectcom, sciences,
brain, brainâ..computer, brainbased, brainbehavior, braincomputer, braincomputerinterfaces, brainfunction,
brainimaging, brainmachine, brainmachineinterface, brainprediction, brainreading, brainregionspecific, brains,
brainscanning, brainwave, brainwaves, consciousbrain, marketbrain, nonbrain,
computation, computational, computed, computer, computers, computersmartphone,
computersupported, computing, humancomputer, interface, interfaces,
cloud,blockchain, artificial, intelligence, intelligent, brainmachine, brainmachineinterface, humanâ..machine, humanmachine,
machine, machinelearning, machinerecursive, machines, manmachine, processingâ..machine,
deeplearning, elearning, learn, learned, learner, learning, learningbased, machinelearning,
mlearning,  digital, digitalized, digitalneuro, digitalphysical, neurodigital,
misperception, perception, perceptions, percepts, perceptual, attitude, attitudes,
depersonalized, person, personal, personalization, personalized, personnel,
neuropsychological, neuropsychology, psyche, psychiatric, psychiatrists, psychiatry,
psychological, psychology, psychometric, psychophysics, psychophysiological, psychophysiologicalneuromarketing, psychophysiology, psychotherapy,
decision, decisionâ..making, decisionmaking, decisions, cooper, cooperate, cooperative,
developers, operate, operation, operational, operations, operator, operators, proper,
properly, properties, property))
getwd()
# D:/Research/PAPERS/WORKING/Neuro/NeuroSciencePaper
path <- convertPath() # D:\Research\PAPERS\Neuro\NeuroSciencePaper\data
source('tmdemo.R')
source('easytm.R')
getwd  ()
# marketing
path <- readline()
pathch <- gsub('\\\\', '\\', path)
setwd()
setwd(pathch)
pathch
# marketing
path <- readline()
pathch <- gsub('\\\\', '//', path)
setwd(pathch)
getwd()
source('easytm.R')
convertPath('D:\')
path <- convertPath()
path
path <- convertPath()
path
setwd('~')
getwd()
path <- convertPath()
setwd(path)
getwd()
firstab <- 'There is growing concern amongst policy makers, managers and academic researchers over the role that social media plays in spreading misinformation, widely described as ‘Fake News’. However, research to date has mainly focussed on the implications of fake news for political communication and debate. There has been less focus on the implications of social media misinformation upon marketing and consumers. Given the key role of social media as a communication platform, there is a gap in our understanding of fake news through a consumer lens. We address this gap by conducting an interdisciplinary systematic review of the relevant literature. Through critical evaluation and synthesis of the literature, we identify five themes that explain the fake news phenomenon: the dissemination process, spreading channel features, outcomes, fabricated legitimacy and attitudes. Finally, we propose a theoretical framework that highlights themes’ relationships and research propositions to guide future research in this area.'
convertAbstractToDataSet(firstab)
head(convertAbstractToDataSet(firstab))
op_ <- convertAbstractToDataSet(firstab)
head(op_)
grep(c('marketing', 'fake'), op_)
grep('marketing', op_)
grep('market', op_)
op_
grep('market', op_[, 1])
grep(c('market', 'fake'), op_[, 1])
grep('market', op_[, 1])
grep('fake', op_[, 1])
op_[c(27, 57)]
op_[c(27, 57), ]
op_ <- convertAbstractToDataSet(firstab)
head(op_)
grep('market', op_[, 1])
grep('fake', op_[, 1])
op_[c(27, 57), ]
dim(op_)
secondab <- 'We study the market for fake product reviews on Amazon.com.
Reviews are purchased in large private groups on Facebook
and other sites. We hand-collect data on these markets and
then collect a panel of data on these products’ ratings
and reviews on Amazon, as well as their sales rank,
advertising, and pricing policies. We find that a wide
array of products purchase fake reviews, including products
with many reviews and high average ratings. Buying fake
reviews on Facebook is associated with a significant but
short-term increase in average rating and number of reviews.
We exploit a sharp but temporary policy shift by Amazon to
show that rating manipulation has a large causal effect on
sales. Finally, we examine whether rating manipulation harms
consumers or whether it is mainly used by high-quality
products in a manner like advertising or by new products
trying to solve the cold-start problem. We find that after
firms stop buying fake reviews, their average ratings fall
and the share of one-star reviews increases significantly,
particularly for young products, indicating rating manipulation
is mostly used by low-quality products.'
op_ <- convertAbstractToDataSet(secondtab)
op_ <- convertAbstractToDataSet(secondab)
head(op_)
preps <- c('\n', '\t', 'in', 'on', 'the', 'The', 'this', 'This', 'with', 'and', 'And', 'be', 'Be', 'of', 'would', 'could', 'under', 'Under', 'above', 'Above', 'Below', 'below', 'is', 'was', 'being', 'Being', 'to', 'To', 'With', 'which', 'Which', 'shall', 'Shall', 'On', 'not', 'Not', 'None', 'none', 'made', 'Made', 'Make', 'make', 'it', 'its', 'It', 'has', 'Has', 'from', 'From', 'For', 'for', 'been', 'Been', 'Being', 'being', 'a', 'A', 'as', 'As', 'can', 'could', 'Can', 'Could', 'using', 'Using', 'many', 'Many', 'also', 'Also', 'use', 'Use', 'used', 'Used')
dim(op_)
grep('market', op_[, 1])
grep('fake', op_[, 1])
op_[c(55, 56, 29), ]
op_[op_ <=0]
op_[op_[, 2] <=0]
op_[, 2] <=0
clnab <- cleanData(op_)
dim(clnab)
head(clnab)
clnab <- cleanData(op_, th=1)
dim(clnab)
head(clnab)
preps <- c('but', 'by', '\n', '\t', 'in', 'on', 'the', 'The', 'this', 'This', 'with', 'and', 'And', 'be', 'Be', 'of', 'would', 'could', 'under', 'Under', 'above', 'Above', 'Below', 'below', 'is', 'was', 'being', 'Being', 'to', 'To', 'With', 'which', 'Which', 'shall', 'Shall', 'On', 'not', 'Not', 'None', 'none', 'made', 'Made', 'Make', 'make', 'it', 'its', 'It', 'has', 'Has', 'from', 'From', 'For', 'for', 'been', 'Been', 'Being', 'being', 'a', 'A', 'as', 'As', 'can', 'could', 'Can', 'Could', 'using', 'Using', 'many', 'Many', 'also', 'Also', 'use', 'Use', 'used', 'Used')
clnab <- cleanData(op_, th=1)
dim(clnab)
head(clnab)
secondab <- 'We study the market for fake product reviews on Amazon.com.
Reviews are purchased in large private groups on Facebook
and other sites. We hand-collect data on these markets and
then collect a panel of data on these products’ ratings
and reviews on Amazon, as well as their sales rank,
advertising, and pricing policies. We find that a wide
array of products purchase fake reviews, including products
with many reviews and high average ratings. Buying fake
reviews on Facebook is associated with a significant but
short-term increase in average rating and number of reviews.
We exploit a sharp but temporary policy shift by Amazon to
show that rating manipulation has a large causal effect on
sales. Finally, we examine whether rating manipulation harms
consumers or whether it is mainly used by high-quality
products in a manner like advertising or by new products
trying to solve the cold-start problem. We find that after
firms stop buying fake reviews, their average ratings fall
and the share of one-star reviews increases significantly,
particularly for young products, indicating rating manipulation
is mostly used by low-quality products.'
op_ <- convertAbstractToDataSet(secondab)
head(op_)
dim(op_)
grep('market', op_[, 1])
grep('fake', op_[, 1])
op_[c(55, 56, 29), ]
clnab <- cleanData(op_, th=1)
dim(clnab)
head(clnab)
preps <- c('find', 'finds', 'finding', 'found', 'but', 'by', '\n', '\t', 'in', 'on', 'the', 'The', 'this', 'This', 'with', 'and', 'And', 'be', 'Be', 'of', 'would', 'could', 'under', 'Under', 'above', 'Above', 'Below', 'below', 'is', 'was', 'being', 'Being', 'to', 'To', 'With', 'which', 'Which', 'shall', 'Shall', 'On', 'not', 'Not', 'None', 'none', 'made', 'Made', 'Make', 'make', 'it', 'its', 'It', 'has', 'Has', 'from', 'From', 'For', 'for', 'been', 'Been', 'Being', 'being', 'a', 'A', 'as', 'As', 'can', 'could', 'Can', 'Could', 'using', 'Using', 'many', 'Many', 'also', 'Also', 'use', 'Use', 'used', 'Used')
clnab <- cleanData(op_, th=1)
dim(clnab)
head(clnab)
plot(op_[, 2])
text(op_[, 2], labels = op_[, 1])
clnab <- cleanData(op_, th=2)
dim(clnab)
head(clnab)
plot(op_[, 2])
text(op_[, 2], labels = op_[, 1])
clnab <- cleanData(op_, th=3)
dim(clnab)
head(clnab)
plot(op_[, 2], xlim = 6, ylim= 6)
plot(op_[, 2], xlim = c(0, 6), ylim= c(0, 6))
clnab <- cleanData(op_, th=2)
dim(clnab)
head(clnab)
plot(op_[, 2], xlim = c(0, 6), ylim= c(0, 6))
max(op_[, 2])
op_[, 2]
clnab <- cleanData(op_)
dim(clnab)
head(clnab)
clnab <- cleanData(op_, th=NA)
dim(clnab)
clnab <- cleanData(op_, th=1)
dim(clnab)
head(clnab)
plot(op_[, 2])
clnab <- cleanData(op_, th=5)
dim(clnab)
plot(op_[, 2])
dim(clnab)
clnab <- cleanData(op_, th=3)
dim(clnab)
head(clnab)
clnab
plot(clnab[, 2])
plot(clnab[-1, 2])
clnab <- clnab[-1, ]
dim(clnab)
head(clnab)
clnab
max(op_[, 2])
clnab
max(clnab[, 2])
clnab <- cleanData(op_, th=1)
clnab
clnab <- clnab[-1, ]
dim(clnab)
max(clnab[, 2])
plot(clnab, xlim = c(0, 10), ylim = c(0, 10))
plot(clnab[, 2], xlim = c(0, 10), ylim = c(0, 10))
text(op_[, 2], labels = clnab[, 1])
plot(clnab[, 2], xlim = c(0, 20), ylim = c(0, 10))
text(op_[, 2], labels = clnab[, 1])
preps <- c('these', 'that', 'we', 'find', 'finds', 'finding', 'found', 'but', 'by', '\n', '\t', 'in', 'on', 'the', 'The', 'this', 'This', 'with', 'and', 'And', 'be', 'Be', 'of', 'would', 'could', 'under', 'Under', 'above', 'Above', 'Below', 'below', 'is', 'was', 'being', 'Being', 'to', 'To', 'With', 'which', 'Which', 'shall', 'Shall', 'On', 'not', 'Not', 'None', 'none', 'made', 'Made', 'Make', 'make', 'it', 'its', 'It', 'has', 'Has', 'from', 'From', 'For', 'for', 'been', 'Been', 'Being', 'being', 'a', 'A', 'as', 'As', 'can', 'could', 'Can', 'Could', 'using', 'Using', 'many', 'Many', 'also', 'Also', 'use', 'Use', 'used', 'Used')
clnab <- cleanData(op_, th=1)
clnab <- clnab[-1, ]
dim(clnab)
head(clnab)
max(clnab[, 2])
plot(clnab[, 2], xlim = c(0, 20), ylim = c(0, 10))
text(clnab[, 2], labels = clnab[, 1])
preps <- c('We', 'or', 'these', 'that', 'we', 'find', 'finds', 'finding', 'found', 'but', 'by', '\n', '\t', 'in', 'on', 'the', 'The', 'this', 'This', 'with', 'and', 'And', 'be', 'Be', 'of', 'would', 'could', 'under', 'Under', 'above', 'Above', 'Below', 'below', 'is', 'was', 'being', 'Being', 'to', 'To', 'With', 'which', 'Which', 'shall', 'Shall', 'On', 'not', 'Not', 'None', 'none', 'made', 'Made', 'Make', 'make', 'it', 'its', 'It', 'has', 'Has', 'from', 'From', 'For', 'for', 'been', 'Been', 'Being', 'being', 'a', 'A', 'as', 'As', 'can', 'could', 'Can', 'Could', 'using', 'Using', 'many', 'Many', 'also', 'Also', 'use', 'Use', 'used', 'Used')
help('text')
clnab <- cleanData(op_, th=1)
clnab <- clnab[-1, ]
dim(clnab)
head(clnab)
max(clnab[, 2])
plot(clnab[, 2], xlim = c(0, 20), ylim = c(0, 10))
text(clnab[, 2], labels = clnab[, 1], pos = 2)
plot(clnab[, 2], xlim = c(0, 20), ylim = c(0, 10))
text(clnab[, 2], labels = clnab[, 1], pos = 3)
plot(clnab[, 2], xlim = c(0, 20), ylim = c(0, 10))
text(clnab[, 2], labels = clnab[, 1], pos = 2)
plot(clnab[, 2], xlim = c(0, 20), ylim = c(0, 10))
text(clnab[, 2], labels = clnab[, 1], pos = 4)
op_ <- convertAbstractToDataSet(firstab)
head(op_)
dim(op_)
grep('market', op_[, 1])
grep('fake', op_[, 1])
op_[c(27, 57), ]
clnab <- cleanData(op_, th=1)
clnab <- clnab[-1, ]
clnab <- cleanData(op_, th=1)
clnab
preps <- c('There', 'there', 'We', 'or', 'these', 'that', 'we', 'find', 'finds', 'finding', 'found', 'but', 'by', '\n', '\t', 'in', 'on', 'the', 'The', 'this', 'This', 'with', 'and', 'And', 'be', 'Be', 'of', 'would', 'could', 'under', 'Under', 'above', 'Above', 'Below', 'below', 'is', 'was', 'being', 'Being', 'to', 'To', 'With', 'which', 'Which', 'shall', 'Shall', 'On', 'not', 'Not', 'None', 'none', 'made', 'Made', 'Make', 'make', 'it', 'its', 'It', 'has', 'Has', 'from', 'From', 'For', 'for', 'been', 'Been', 'Being', 'being', 'a', 'A', 'as', 'As', 'can', 'could', 'Can', 'Could', 'using', 'Using', 'many', 'Many', 'also', 'Also', 'use', 'Use', 'used', 'Used')
clnab <- cleanData(op_, th=1)
dim(clnab)
head(clnab)
max(clnab[, 2])
plot(clnab[, 2], xlim = c(0, 20), ylim = c(0, 10))
text(clnab[, 2], labels = clnab[, 1], pos = 4)
clnab <- cleanData(op_)
clnab
clnab <- cleanData(op_, th=NA)
dim(clnab)
clnab <- cleanData(op_, th=1)
dim(clnab)
clnab
op_ <- convertAbstractToDataSet(firstab)
op_ <- convertAbstractToDataSet(firstab)
grep('market', op_[, 1])
grep('fake', op_[, 1])
op_[c(27, 57), ]
plotWordVec <- function(v1, lbls){
plot(v1)
text(v1, labels = lbls)
}
plotWordVec(clnab[, 2], lbls = clnab[, 1])
clnabf <- cleanData(op_, th=1)
dim(clnabf)
ops <- convertAbstractToDataSet(secondab)
clnabs <- cleanData(ops, th=1)
dim(clnabs)
union(op_, ops)
intersect(op_[, 1], ops[, 1])
clnabs <- cleanData(ops, th=1)
intersect(clnabf[, 1], clnabs[, 1])
clnabf[, 1]["fake"]; clnabs[, 1]['fake']
greap("fake", clnabf); greap("fake", clnabs)
grep("fake", clnabf); greap("fake", clnabs)
grep("fake", clnabf); grep("fake", clnabs)
grep("fake", clnabf[, 1]); grep("fake", clnabs[, 1])
clnabf[2, ]; clnabs[, 5]
clnabf[2, ]
clnabs[5, ]
searchVariable <- function(trm=NA, v1=NA){
num_ <- grep(trm, v1)
return(as.numeric(v1[num_, ]))
}
searchVariable('fake', clnabf[, 1])
searchVariable <- function(trm=NA, v1=NA){
num_ <- grep(trm, v1)
return(v1[num_, ])
}
searchVariable('fake', clnabf[, 1])
typeof(grep("fake", clnabf[, 1]))
n <- grep("fake", clnabf[, 1])
n
clnabf[n, ]
searchVariable <- function(trm=NA, v1=NA){
n_ <- grep(as.character(trm), v1)
return(v1[n_, ])
}
searchVariable('fake', clnabf[, 1])
searchVariable <- function(trm=NA, v1=NA){
n_ <- grep(as.character(trm), v1[, 1])
return(v1[n_, ])
}
searchVariable('fake', clnabf)
searchWord <- function(trm=NA, v1=NA){
n_ <- grep(as.character(trm), v1[, 1])
return(v1[n_, ])
}
searchWord('fake', clnabf)
searchWord('fake', clnabf)
r1 <- searchWord('fake', clnabf)
r2 <- searchWord('fake', clnabf)
rbind(r1, r2)
rownames(rbind(r1, r2)) <- c('d1', 'd2')
df_ <- rbind(r1, r2))
df_ <- rbind(r1, r2)
rownames(df_) <- c('d1', 'd2')
df_
makeDfFromWord <- function(trm=NA, df1, df2){
r1 <- searchWord('fake', df1)
r2 <- searchWord('fake', df2)
df_ <- rbind(r1, r2)
rownames(df_) <- c('d1', 'd2')
return(df_)
}
makeDfFromWord('fake', clnabf, clnabs)
path <- convertPath()
setwd(path)
datafile <- read.csv('scopus.csv')
importDataFile('scopus.csv')
names(datafile)
# names(datafile)
abs <- makeAbstracts(datafile)
df_ <- cleanCorpusAndMakeDF(abs)
names(df_)
litdf <- df_[, -c(1:126)]
dim(df)
dim(t(df))
dim(litdf)
searchVariable(trm=NA, dataf){
n_ <- grep(as.character(trm), dataf)
names(dataf)[n_]
}
searchVariable(trm=NA, dataf){
n_ <- grep(as.character(trm), dataf)
print(names(dataf)[n_])
}
searchVariable <- function(trm=NA, dataf){
n_ <- grep(as.character(trm), dataf)
print(names(dataf)[n_])
}
searchVariable('fake', df_)
grep('fake', names(df_))
n <- grep('fake', names(df_))
n
n <- grep('fake', names(df_))
for (i in n){
print(names(df_)[i])
}
searchVariable <- function(trm=NA, dataf){
n_ <- grep(as.character(trm), dataf)
for (i in n){
print(names(df_)[i])
}
}
searchVariable('fake', df_)
n <- grep('fake', names(df_))
for (i in n){
print(names(df_)[i])
vec[i] <- names(df_)[i]
}
vec <- NA
for (i in n){
print(names(df_)[i])
vec[i] <- names(df_)[i]
}
vec
vec <- matrix(NA, n, 1)
for (i in n){
print(names(df_)[i])
vec[i, 1] <- names(df_)[i]
}
n
vec
vec <- vector()
for (i in n){
print(names(df_)[i])
vec[i, 1] <- names(df_)[i]
}
vec <- vector()
for (i in n){
print(names(df_)[i])
vec[i] <- names(df_)[i]
}
df_ <- cleanCorpusAndMakeDF(abs, 0.99)
names(df_)
grep('able', names(df_))
grep('ability', names(df_))
grep('abortion', names(df_))
grep('abortion', names(df_)[1:200])
n <- grep('abortion', names(df_)[1:200])
litdf <- df_[, -c(1:n)]
dim(litdf)
names(litdf)
n <- grep('ability', names(df_)[1:200])
n
litdf <- df_[, -c(1:n)]
dim(litdf)
names(litdf)
cleanCorpusAndMakeDF <- function(abs, DF=FALSE, sparcity = NULL){
abscorp <- VCorpus((VectorSource(t(abs))))
corp_ <- tm_map(abscorp, stripWhitespace)
corp_ <- tm_map(corp_, content_transformer(tolower))
corp_ <- tm_map(corp_, removeWords, stopwords("english"))
corp_ <- tm_map(corp_, removeNumbers)
corp_ <- tm_map(corp_, removePunctuation)
adtm <- DocumentTermMatrix(corp_)
n <- grep('ability', names(adtm)[1:200])
adtm <- adtm[, -c(1:n)]
if (DF & !is.null(sparcity)){
dataframe <- data.frame(as.matrix(removeSparseTerms(adtm, sparcity)))
return(dataframe)
print(dim(dataframe))
} else {
dataframe <- data.frame(as.matrix(adtm))
return(dataframe)
}
}
df_ <- cleanCorpusAndMakeDF(abs, 0.99)
return(dataframe)
cleanCorpusAndMakeDF <- function(abs, DF=FALSE, sparcity = NULL){
abscorp <- VCorpus((VectorSource(t(abs))))
corp_ <- tm_map(abscorp, stripWhitespace)
corp_ <- tm_map(corp_, content_transformer(tolower))
corp_ <- tm_map(corp_, removeWords, stopwords("english"))
corp_ <- tm_map(corp_, removeNumbers)
corp_ <- tm_map(corp_, removePunctuation)
adtm <- DocumentTermMatrix(corp_)
if (DF & !is.null(sparcity)){
dataframe <- data.frame(as.matrix(removeSparseTerms(adtm, sparcity)))
n <- grep('ability', names(dataframe)[1:200])
dataframe <- dataframe[, -c(1:n)]
return(dataframe)
print(dim(dataframe))
} else {
dataframe <- data.frame(as.matrix(adtm))
n <- grep('ability', names(dataframe)[1:200])
dataframe <- dataframe[, -c(1:n)]
return(dataframe)
}
}
df_ <- cleanCorpusAndMakeDF(abs, 0.99)
dim(df_)
names(df_)
searchPattern <- function(trm=NA, dataf){
n <- grep(as.character(trm), names(df_))
vec <- vector()
for (i in n){
print(names(dataf)[i])
vec[i] <- names(dataf)[i]
}
}
searchVariable('fake', df_)
