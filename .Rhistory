}
checkPrep('come')
checkPrep <- function(char_ = NA){
if(!is.na(char_) & char_ %in% preps == FALSE){
print("The 'prep' is not found!")
} else if (char_ %in% preps == TRUE){
print("The 'prep' found!")
}
}
checkPrep('come')
checkPrep()
checkPrep <- function(char_ = NA){
if(!is.na(char_) | char_ %in% preps == FALSE){
print("The 'prep' is not found!")
} else if (char_ %in% preps == TRUE){
print("The 'prep' found!")
}
}
checkPrep()
checkPrep <- function(char_ = NA){
if(!is.na(char_) | char_ %in% preps == FALSE){
print("Either 'prep' is not found! or Input is missing!")
} else if (char_ %in% preps == TRUE){
print("The 'prep' found!")
}
}
checkPrep()
checkPrep('come')
checkPrep('shall')
checkPrep <- function(char_ = NA){
if(!is.na(char_) | char_ %in% preps == FALSE){
print("Either 'prep' is not found! or Input is missing!")
} else if(char_ %in% preps == TRUE){
print("The 'prep' found!")
}
}
checkPrep('shall')
checkPrep <- function(char_ = NA){
if(!is.na(char_) | char_ %in% preps == FALSE){
print("Either 'prep' is not found! or Input is missing!")
} else {
print("The 'prep' found!")
}
}
checkPrep('shall')
checkPrep <- function(char_ = NA){
if(!is.na(char_)){
if (char_ %in% preps == FALSE){
print("Either 'prep' is not found!")
} else {
print('The prep found!')
}
} else {
print("Input is missing!")
}
}
checkPrep('shall')
checkPrep('come')
updatePreps(c('come', 'came', 'go', 'Go', 'went', 'Went', 'gone', 'Gone'))
updatePreps <- function(vec=NA){
if (!is.na(vec)){
for (i in 1:length(vec)){
preps[length(preps)+i] <- c(vec[i])
}
} else {
print('check input!')
}
}
updatePreps(c('come', 'came', 'go', 'Go', 'went', 'Went', 'gone', 'Gone'))
updatePreps <- function(vec=NA){
if (!is.na(vec)){
for (i in 1:length(vec)){
preps[length(preps)+1] <- c(vec[i])
}
} else {
print('check input!')
}
}
updatePreps(c('come', 'came', 'go', 'Go', 'went', 'Went', 'gone', 'Gone'))
checkPrep('come')
updatePreps('come')
checkPrep('come')
updatePreps <- function(vec=NA){
if (!is.na(vec)){
for (i in 1:length(vec)){
preps[length(preps)+1] <- vec[i]
}
} else {
print('check input!')
}
}
checkPrep('come')
updatePreps('come')
updatePreps <- function(vec=NA){
if (!is.na(vec)){
for (i in 1:length(vec)){
preps[length(preps)+1] <- vec[i]
print('prep updated!')
}
} else {
print('check input!')
}
}
updatePreps('come')
checkPrep('come')
preps[length(preps)]
updatePreps <- function(vec=NA){
if (!is.na(vec)){
for (i in 1:length(vec)){
preps[length(preps)+1] <<- vec[i]
print('prep updated!')
}
} else {
print('check input!')
}
}
checkPrep('come')
updatePreps('come')
checkPrep('come')
preps
updatePreps(c('Come', 'came', 'Came'))
checkPrep('came')
checkPrep('Came')
preps[length(preps)]
updatePreps(c('go', 'Go'))
preps[length(preps)]
updatePreps(c('went', 'Went'))
preps[length(preps)]
updatePreps(c('gone', 'Gone'))
preps <- c( 'upon', 'Upon', 'one', 'two', 'Two', 'Three', 'three', 'four', 'Four', 'five', 'Five', 'Six', 'six', 'seven', 'Seven',
'eight', 'Eight', 'nine', 'Nine', 'ten', 'Ten', 'Zero', 'zero', 'key', 'Key', 'Less', 'less', 'More', 'more',
'our', 'Our', 'a', 'A', 'an', 'An', 'over', 'Over', 'With', 'With', 'under', 'Under', '\n', 'There', 'there', 'We', 'or', 'these', 'that', 'we', 'find', 'finds', 'finding', 'found', 'but', 'by', '\n', '\t', 'in', 'on', 'the', 'The', 'this', 'This', 'with', 'and', 'And', 'be', 'Be', 'of', 'would', 'could', 'under', 'Under', 'above', 'Above', 'Below', 'below', 'is', 'was', 'being', 'Being', 'to', 'To', 'With', 'which', 'Which', 'shall', 'Shall', 'On', 'not', 'Not', 'None', 'none', 'made', 'Made', 'Make', 'make', 'it', 'its', 'It', 'has', 'Has', 'from', 'From', 'For', 'for', 'been', 'Been', 'Being', 'being', 'a', 'A', 'as', 'As', 'can', 'could', 'Can', 'Could', 'using', 'Using', 'many', 'Many', 'also', 'Also', 'use', 'Use', 'used', 'Used',
'their', 'Their', 'Then', 'then', 'after', 'After', 'are', 'Are', 'fall', 'Fall', 'finally', 'Finally',
'high', 'High', 'include', 'Include', 'including', 'Including', 'increase', 'Increase', 'increasing', 'Increasing', 'Increased', 'increased',
'high', 'High', 'large', 'Large', 'largest', 'Largest', 'like', 'Like', 'main', 'Main', 'mainly', 'Mainly',
'manner', 'Manner', 'new', 'New', 'newly', 'Newly', 'newness', 'Newness', 'number', 'Number',
'other', 'Other', 'another', 'Another', 'can', 'Can', "Can't", "can't", 'could', 'Could',
'should', 'Should', 'shall', 'Shall', 'will', 'Will', 'would', 'Would', 'stop', 'Stop', 'stopped', 'Stopped',
'then', 'Then', 'well', 'Well', 'wide', 'Wide', 'young', 'Young', 'yet', 'Yet',
'come', 'Come', 'go', 'Go', 'went', 'Went', 'gone', 'Gone')
plotWordVec(abf[, 2], lbls = abf[, 1])
plotWordVec(abf[, 2] > 1, lbls = abf[, 1])
plotWordVec(abf[, 2] > 2, lbls = abf[, 1])
plotWordVec(abf[, 2] > 3, lbls = abf[, 1])
abs <- cleanData(abs)
abs
preps <- c( 'upon', 'Upon', 'one', 'two', 'Two', 'Three', 'three', 'four', 'Four', 'five', 'Five', 'Six', 'six', 'seven', 'Seven',
'eight', 'Eight', 'nine', 'Nine', 'ten', 'Ten', 'Zero', 'zero', 'key', 'Key', 'Less', 'less', 'More', 'more',
'our', 'Our', 'a', 'A', 'an', 'An', 'over', 'Over', 'With', 'With', 'under', 'Under', '\n', 'There', 'there', 'We', 'or', 'these', 'that', 'we', 'find', 'finds', 'finding', 'found', 'but', 'by', '\n', '\t', 'in', 'on', 'the', 'The', 'this', 'This', 'with', 'and', 'And', 'be', 'Be', 'of', 'would', 'could', 'under', 'Under', 'above', 'Above', 'Below', 'below', 'is', 'was', 'being', 'Being', 'to', 'To', 'With', 'which', 'Which', 'shall', 'Shall', 'On', 'not', 'Not', 'None', 'none', 'made', 'Made', 'Make', 'make', 'it', 'its', 'It', 'has', 'Has', 'from', 'From', 'For', 'for', 'been', 'Been', 'Being', 'being', 'a', 'A', 'as', 'As', 'can', 'could', 'Can', 'Could', 'using', 'Using', 'many', 'Many', 'also', 'Also', 'use', 'Use', 'used', 'Used',
'their', 'Their', 'Then', 'then', 'after', 'After', 'are', 'Are', 'fall', 'Fall', 'finally', 'Finally',
'high', 'High', 'include', 'Include', 'including', 'Including', 'increase', 'Increase', 'increasing', 'Increasing', 'Increased', 'increased',
'high', 'High', 'large', 'Large', 'largest', 'Largest', 'like', 'Like', 'main', 'Main', 'mainly', 'Mainly',
'manner', 'Manner', 'new', 'New', 'newly', 'Newly', 'newness', 'Newness', 'number', 'Number',
'other', 'Other', 'another', 'Another', 'can', 'Can', "Can't", "can't", 'could', 'Could',
'should', 'Should', 'shall', 'Shall', 'will', 'Will', 'would', 'Would', 'stop', 'Stop', 'stopped', 'Stopped',
'then', 'Then', 'well', 'Well', 'wide', 'Wide', 'young', 'Young', 'yet', 'Yet',
'come', 'Come', 'go', 'Go', 'went', 'Went', 'gone', 'Gone', 'whether', 'Whether',
'try', 'Try', 'trying', 'Trying')
abs <- cleanData(abs)
abs
preps <- c( 'upon', 'Upon', 'one', 'two', 'Two', 'Three', 'three', 'four', 'Four', 'five', 'Five', 'Six', 'six', 'seven', 'Seven',
'eight', 'Eight', 'nine', 'Nine', 'ten', 'Ten', 'Zero', 'zero', 'key', 'Key', 'Less', 'less', 'More', 'more',
'our', 'Our', 'a', 'A', 'an', 'An', 'over', 'Over', 'With', 'With', 'under', 'Under', '\n', 'There', 'there', 'We', 'or', 'these', 'that', 'we', 'find', 'finds', 'finding', 'found', 'but', 'by', '\n', '\t', 'in', 'on', 'the', 'The', 'this', 'This', 'with', 'and', 'And', 'be', 'Be', 'of', 'would', 'could', 'under', 'Under', 'above', 'Above', 'Below', 'below', 'is', 'was', 'being', 'Being', 'to', 'To', 'With', 'which', 'Which', 'shall', 'Shall', 'On', 'not', 'Not', 'None', 'none', 'made', 'Made', 'Make', 'make', 'it', 'its', 'It', 'has', 'Has', 'from', 'From', 'For', 'for', 'been', 'Been', 'Being', 'being', 'a', 'A', 'as', 'As', 'can', 'could', 'Can', 'Could', 'using', 'Using', 'many', 'Many', 'also', 'Also', 'use', 'Use', 'used', 'Used',
'their', 'Their', 'Then', 'then', 'after', 'After', 'are', 'Are', 'fall', 'Fall', 'finally', 'Finally',
'high', 'High', 'include', 'Include', 'including', 'Including', 'increase', 'Increase', 'increasing', 'Increasing', 'Increased', 'increased',
'high', 'High', 'large', 'Large', 'largest', 'Largest', 'like', 'Like', 'main', 'Main', 'mainly', 'Mainly',
'manner', 'Manner', 'new', 'New', 'newly', 'Newly', 'newness', 'Newness', 'number', 'Number',
'other', 'Other', 'another', 'Another', 'can', 'Can', "Can't", "can't", 'could', 'Could',
'should', 'Should', 'shall', 'Shall', 'will', 'Will', 'would', 'Would', 'stop', 'Stop', 'stopped', 'Stopped',
'then', 'Then', 'well', 'Well', 'wide', 'Wide', 'young', 'Young', 'yet', 'Yet',
'come', 'Come', 'go', 'Go', 'went', 'Went', 'gone', 'Gone', 'whether', 'Whether',
'try', 'Try', 'trying', 'Trying', 'show', 'Show', 'sharp', 'sharp', 'shape', 'Shape')
abs <- cleanData(abs)
abs
preps <- c( 'upon', 'Upon', 'one', 'two', 'Two', 'Three', 'three', 'four', 'Four', 'five', 'Five', 'Six', 'six', 'seven', 'Seven',
'eight', 'Eight', 'nine', 'Nine', 'ten', 'Ten', 'Zero', 'zero', 'key', 'Key', 'Less', 'less', 'More', 'more',
'our', 'Our', 'a', 'A', 'an', 'An', 'over', 'Over', 'With', 'With', 'under', 'Under', '\n', 'There', 'there', 'We', 'or', 'these', 'that', 'we', 'find', 'finds', 'finding', 'found', 'but', 'by', '\n', '\t', 'in', 'on', 'the', 'The', 'this', 'This', 'with', 'and', 'And', 'be', 'Be', 'of', 'would', 'could', 'under', 'Under', 'above', 'Above', 'Below', 'below', 'is', 'was', 'being', 'Being', 'to', 'To', 'With', 'which', 'Which', 'shall', 'Shall', 'On', 'not', 'Not', 'None', 'none', 'made', 'Made', 'Make', 'make', 'it', 'its', 'It', 'has', 'Has', 'from', 'From', 'For', 'for', 'been', 'Been', 'Being', 'being', 'a', 'A', 'as', 'As', 'can', 'could', 'Can', 'Could', 'using', 'Using', 'many', 'Many', 'also', 'Also', 'use', 'Use', 'used', 'Used',
'their', 'Their', 'Then', 'then', 'after', 'After', 'are', 'Are', 'fall', 'Fall', 'finally', 'Finally',
'high', 'High', 'include', 'Include', 'including', 'Including', 'increase', 'Increase', 'increasing', 'Increasing', 'Increased', 'increased',
'high', 'High', 'large', 'Large', 'largest', 'Largest', 'like', 'Like', 'main', 'Main', 'mainly', 'Mainly',
'manner', 'Manner', 'new', 'New', 'newly', 'Newly', 'newness', 'Newness', 'number', 'Number',
'other', 'Other', 'another', 'Another', 'can', 'Can', "Can't", "can't", 'could', 'Could',
'should', 'Should', 'shall', 'Shall', 'will', 'Will', 'would', 'Would', 'stop', 'Stop', 'stopped', 'Stopped',
'then', 'Then', 'well', 'Well', 'wide', 'Wide', 'young', 'Young', 'yet', 'Yet',
'come', 'Come', 'go', 'Go', 'went', 'Went', 'gone', 'Gone', 'whether', 'Whether',
'try', 'Try', 'trying', 'Trying', 'show', 'Show', 'sharp', 'sharp', 'shape', 'Shape',
'share', 'Share', 'see', 'See', 'saw', 'Saw', 'seeing', 'Seeing', 'found', 'Found')
abs[c(n3, n4), ]
makeDfFromWord('fake', abf, abs)
makeDfFromWord('market', abf, abs)
makeDfFromWord('market', abf, abs)
intersect(abf[, 1], abs[, 1])
abs[c(n3, n4), ]
makeDfFromWord <- function(trm=NA, df1, df2){
r1 <- searchWord(trm, df1)
r2 <- searchWord(trm, df2)
df_ <- rbind(r1, r2)
rownames(df_) <- c('v1', 'v2')
return(df_)
}
makeDfFromWord('market', abf, abs)
searchWordVec('market', abf)
searchWordVec('market', abs)
makeDfFromWord <- function(trm=NA, df1, df2){
r1 <- searchWord(trm, df1)
r2 <- searchWord(trm, df2)
df_ <- rbind(r1, r2)
return(df_)
}
makeDfFromWord('market', abf, abs)
intersect(abf[, 1], abs[, 1])
preps <- c( 'upon', 'Upon', 'one', 'two', 'Two', 'Three', 'three', 'four', 'Four', 'five', 'Five', 'Six', 'six', 'seven', 'Seven',
'eight', 'Eight', 'nine', 'Nine', 'ten', 'Ten', 'Zero', 'zero', 'key', 'Key', 'Less', 'less', 'More', 'more',
'our', 'Our', 'a', 'A', 'an', 'An', 'over', 'Over', 'With', 'With', 'under', 'Under', '\n', 'There', 'there', 'We', 'or', 'these', 'that', 'we', 'find', 'finds', 'finding', 'found', 'but', 'by', '\n', '\t', 'in', 'on', 'the', 'The', 'this', 'This', 'with', 'and', 'And', 'be', 'Be', 'of', 'would', 'could', 'under', 'Under', 'above', 'Above', 'Below', 'below', 'is', 'was', 'being', 'Being', 'to', 'To', 'With', 'which', 'Which', 'shall', 'Shall', 'On', 'not', 'Not', 'None', 'none', 'made', 'Made', 'Make', 'make', 'it', 'its', 'It', 'has', 'Has', 'from', 'From', 'For', 'for', 'been', 'Been', 'Being', 'being', 'a', 'A', 'as', 'As', 'can', 'could', 'Can', 'Could', 'using', 'Using', 'many', 'Many', 'also', 'Also', 'use', 'Use', 'used', 'Used',
'their', 'Their', 'Then', 'then', 'after', 'After', 'are', 'Are', 'fall', 'Fall', 'finally', 'Finally',
'high', 'High', 'include', 'Include', 'including', 'Including', 'increase', 'Increase', 'increasing', 'Increasing', 'Increased', 'increased',
'high', 'High', 'large', 'Large', 'largest', 'Largest', 'like', 'Like', 'main', 'Main', 'mainly', 'Mainly',
'manner', 'Manner', 'new', 'New', 'newly', 'Newly', 'newness', 'Newness', 'number', 'Number',
'other', 'Other', 'another', 'Another', 'can', 'Can', "Can't", "can't", 'could', 'Could',
'should', 'Should', 'shall', 'Shall', 'will', 'Will', 'would', 'Would', 'stop', 'Stop', 'stopped', 'Stopped',
'then', 'Then', 'well', 'Well', 'wide', 'Wide', 'young', 'Young', 'yet', 'Yet',
'come', 'Come', 'go', 'Go', 'went', 'Went', 'gone', 'Gone', 'whether', 'Whether',
'try', 'Try', 'trying', 'Trying', 'show', 'Show', 'sharp', 'sharp', 'shape', 'Shape',
'share', 'Share', 'see', 'See', 'saw', 'Saw', 'seeing', 'Seeing', 'found', 'Found',
'final', 'Final', 'finally', 'Finally', 'end', 'End')
abf <- convertAbstractToDataSet(firstab)
# head(abf)
# dim(abf)
abf <- cleanData(abf)
grep('market', abf[, 1])
n1 <- searchWordVec('market', abf)
n2 <- searchWordVec('fake', abf)
# grep('market', op_[, 1])
# grep('fake', op_[, 1])
abf[c(n1, n2), ]
abs <- convertAbstractToDataSet(secondab)
abs <- cleanData(abs)
# head(abs)
# dim(abs)
# grep('market', ops[, 1])
# grep('fake', ops[, 1])
n3 <- searchWordVec('market', abs)
n4 <- searchWordVec('fake', abs)
abs[c(n3, n4), ]
getwd()
# importDataFile('scopus.csv')
datafile <- read.csv('scopus.csv')
# importDataFile('scopus.csv')
# datafile <- read.csv('scopus.csv')
dataf <- importDataFile('scopus.csv')
# names(datafile)
abs <- makeAbstracts(dataf)
absdf <- cleanCorpusAndMakeDF(abs, 0.99)
head(absdf)
dim(absdf)
names(absdf)
head(names(absdf))
cleanCorpusAndMakeDF <- function(abs, DF=FALSE, sparcity = NULL){
abscorp <- VCorpus((VectorSource(t(abs))))
corp_ <- tm_map(abscorp, stripWhitespace)
corp_ <- tm_map(corp_, content_transformer(tolower))
corp_ <- tm_map(corp_, removeWords, stopwords("english"))
corp_ <- tm_map(corp_, removeNumbers)
corp_ <- tm_map(corp_, removePunctuation)
adtm <- DocumentTermMatrix(corp_)
if (DF & !is.null(sparcity)){
dataframe <- data.frame(as.matrix(removeSparseTerms(adtm, sparcity)))
n <- grep('ability', names(dataframe))
dataframe <- dataframe[, -c(1:n)]
return(dataframe)
print(dim(dataframe))
} else {
dataframe <- data.frame(as.matrix(adtm))
n <- grep('ability', names(dataframe))
dataframe <- dataframe[, -c(1:n)]
return(dataframe)
}
}
absdf <- cleanCorpusAndMakeDF(abs, 0.99)
dim(absdf)
grep('ability', names(absdf)[1:200])
n <- grep('ability', names(absdf)[1:200])
n
litdf <- absdf[, -c(1:n)]
litdf
head(litdf)
head(naems(litdf))
head(names(absdf))
cleanCorpusAndMakeDF <- function(abs, DF=FALSE, sparcity = NULL){
abscorp <- VCorpus((VectorSource(t(abs))))
corp_ <- tm_map(abscorp, stripWhitespace)
corp_ <- tm_map(corp_, content_transformer(tolower))
corp_ <- tm_map(corp_, removeWords, stopwords("english"))
corp_ <- tm_map(corp_, removeNumbers)
corp_ <- tm_map(corp_, removePunctuation)
adtm <- DocumentTermMatrix(corp_)
if (DF & !is.null(sparcity)){
dataframe <- data.frame(as.matrix(removeSparseTerms(adtm, sparcity)))
n <- grep('able', names(dataframe))
dataframe <- dataframe[, -c(1:n)]
return(dataframe)
print(dim(dataframe))
} else {
dataframe <- data.frame(as.matrix(adtm))
n <- grep('abile', names(dataframe))
dataframe <- dataframe[, -c(1:n)]
return(dataframe)
}
}
absdf <- cleanCorpusAndMakeDF(abs, 0.99)
cleanCorpusAndMakeDF <- function(abs, DF=FALSE, sparcity = NULL){
abscorp <- VCorpus((VectorSource(t(abs))))
corp_ <- tm_map(abscorp, stripWhitespace)
corp_ <- tm_map(corp_, content_transformer(tolower))
corp_ <- tm_map(corp_, removeWords, stopwords("english"))
corp_ <- tm_map(corp_, removeNumbers)
corp_ <- tm_map(corp_, removePunctuation)
adtm <- DocumentTermMatrix(corp_)
if (DF & !is.null(sparcity)){
dataframe <- data.frame(as.matrix(removeSparseTerms(adtm, sparcity)))
n <- grep('able', names(dataframe))
dataframe <- subset(dataframe, select = -c(1:n))
return(dataframe)
print(dim(dataframe))
} else {
dataframe <- data.frame(as.matrix(adtm))
dataframe <- subset(dataframe, select = -c(1:n))
return(dataframe)
print(dim(dataframe))
}
}
absdf <- cleanCorpusAndMakeDF(abs, 0.99)
dim(absdf)
head(names(absdf))
grep('ability', names(absdf)
grep('ability', names(absdf))
grep('ability', names(absdf))
grep('able', names(absdf))
grep('able', names(absdf)[1:200])
n <- grep('ability', names(absdf)[1:200])
n
grep('able', names(absdf)[1:200])
grep('ability', names(absdf)[1:200])
n[1]
cleanCorpusAndMakeDF <- function(abs, DF=FALSE, sparcity = NULL){
abscorp <- VCorpus((VectorSource(t(abs))))
corp_ <- tm_map(abscorp, stripWhitespace)
corp_ <- tm_map(corp_, content_transformer(tolower))
corp_ <- tm_map(corp_, removeWords, stopwords("english"))
corp_ <- tm_map(corp_, removeNumbers)
corp_ <- tm_map(corp_, removePunctuation)
adtm <- DocumentTermMatrix(corp_)
if (DF & !is.null(sparcity)){
dataframe <- data.frame(as.matrix(removeSparseTerms(adtm, sparcity)))
n <- grep('ability', names(dataframe)[1:200])
litdf <- subset(dataframe, select = -c(1:n[1]))
return(litdf)
print(dim(litdf))
} else {
dataframe <- data.frame(as.matrix(adtm))
n <- grep('ability', names(dataframe)[1:200])
litdf <- subset(dataframe, select = -c(1:n[1]))
return(litdf)
print(dim(litdf))
}
}
absdf <- cleanCorpusAndMakeDF(abs, 0.99)
head(names(absdf))
searchVariable('fake', absdf)
searchVariable <- function(vname = NA, dataf){
vrs <- grep(vname, dataf)
out <- subset(dataf, select = c(vrs))
return(out)
cat(out, 'has', length(names(out)), 'variables.')
}
searchVariable('fake', absdf)
grep('fake', names(absdf))
searchVariable <- function(vname = NA, dataf){
vrs <- grep(vname, names(dataf))
out <- subset(dataf, select = c(vrs))
return(out)
cat(out, 'has', length(names(out)), 'variables.')
}
searchVariable('fake', absdf)
searchVariable('marketing', absdf)
markdf <- searchVariable('marketing', absdf)
searchVariable <- function(vname = NA, dataf){
vrs <- grep(vname, names(dataf))
out <- subset(dataf, select = c(vrs))
return(out)
print(paste(out, 'has', length(names(out)), 'variables.'))
}
markdf <- searchVariable('marketing', absdf)
grep('fake', names(absdf))
idx <- grep('fake', names(absdf))
subset(absdf, select =c(idx))
searchVariable <- function(vname = NA, dataf){
if(!is.na(vname)){
idx <- grep(as.character(vname), names(dataf))
out <- subset(dataf, select = c(idx))
return(out)
print(paste(out, 'has', length(names(out)), 'variables.'))
} else {
print('Check your input!')
}
}
markdf <- searchVariable('marketing', absdf)
markdf
searchVariable <- function(vname = NA, dataf){
if(!is.na(vname)){
idx <- grep(as.character(vname), names(dataf))
out <- subset(dataf, select = c(idx))
return(out)
print(cat(out, 'has', length(names(out)), 'variables.'))
} else {
print('Check your input!')
}
}
markdf <- searchVariable('marketing', absdf)
markdf
markdf <- searchVariable('fake', absdf)
markdf
names(markdf)
searchVariable <- function(vname = NA, dataf){
if(!is.na(vname)){
idx <- grep(as.character(vname), names(dataf))
out <- subset(dataf, select = c(idx))
print(names(out))
return(out)
} else {
print('Check your input!')
}
}
markdf <- searchVariable('marketing', absdf)
markdf <- searchVariable('marketing', absdf)
markdf
# idx <- grep('fake', names(absdf))
# subset(absdf, select =c(idx))
markdf <- searchVariable('marketing', absdf)
dim(markdf)
cons <- searchVariable('consumer', absdf)
sat <- searchVariable('satisfaction', absdf)
fake <- searchVariable('fake', absdf)
news <- searchVariable('news', absdf)
regdf <- data.frame(cons, sat, fake, news)
names(regdf)
lm(cbind(consumer, satisfaction)~ fake + news, data = regdf)
lmfit <- lm(cbind(consumer, satisfaction)~ fake + news, data = regdf)
summary(lmfit)
library(car)
avPlots(lmfit)
avPlot(lmfit)
plot(lmfit)
avPlot(lm(consumer~ fake + news, data = regdf))
lmfit_ <- lm(consumer~ fake + news, data = regdf)
avPlots(lmfit_)
avPlots(lmfit_)
labout(matrix(c(1:4), 2, 2))
layout(matrix(c(1:4), 2, 2))
plot(lmfit)
plot(lmfit_)
avPlots(lmfit_)
plotWordVec(abf[, 2], lbls = abf[, 1])
plotWordVec(abf[, 2], lbls = abf[, 1])
plotWordVec(abf[, 2], lbls = abf[, 1])
plotWordVec(abf[, 2] >=1, lbls = abf[, 1])
abfforp_ <- subset(abf, select = abf[, 2] >=1 )
abf[, 2] >=1
abf[, abf[, 2] >=1]
with(abf, abf[, 2] >=1)
subset(abf, abf[, 2] >=1)
abfforp_ <- subset(abf, abf[, 2] >=1)
plotWordVec(abfforp_[, 2], lbls = abfforp_[, 1])
plotWordVec(abfforp_[, 2], lbls = abf[, 1])
abfforp_ <- subset(abf, abf[, 2] >=2)
plotWordVec(abfforp_[, 2], lbls = abf[, 1])
abfforp_ <- subset(abf, abf[, 2] >=3)
plotWordVec(abfforp_[, 2], lbls = abf[, 1])
plotWordVec(abfforp_[, 2], lbls = abfforp_[, 1])
plotWordVec <- function(v1, lbls, xl = NA, yl=NA){
plot(v1, xlim = xl, yl = yl)
text(v1, labels = lbls)
}
plotWordVec(abfforp_[, 2], lbls = abfforp_[, 1], xl=3, yl=3)
plotWordVec <- function(v1, lbls, xl = NA, yl=NA){
plot(v1, xlim = xl, ylim = yl)
text(v1, labels = lbls)
}
plotWordVec(abfforp_[, 2], lbls = abfforp_[, 1], xl=3, yl=3)
plotWordVec(abfforp_[, 2], lbls = abfforp_[, 1], xl=c(0, 3), yl=c(0, 3))
plotWordVec(abfforp_[, 2], lbls = abfforp_[, 1], xl=c(0, 10), yl=c(0, 10))
plotWordVec(abfforp_[, 2], lbls = abfforp_[, 1], xl=c(0, 5), yl=c(0, 5))
abfforp_ <- subset(abf, abf[, 2] >=2)
plotWordVec(abfforp_[, 2], lbls = abfforp_[, 1], xl=c(0, 5), yl=c(0, 10))
plotWordVec(abfforp_[, 2], lbls = abfforp_[, 1], xl=c(0, 5), yl=c(0, 30))
plotWordVec(abfforp_[, 2], lbls = abfforp_[, 1], xl=c(0, 5), yl=c(0, 50))
plotWordVec(abfforp_[, 2], lbls = abfforp_[, 1], xl=c(0, 15), yl=c(0, 5))
plotWordVec(abfforp_[, 2], lbls = abfforp_[, 1], xl=c(0, 10), yl=c(0, 5))
plotWordVec(abfforp_[, 2], lbls = abfforp_[, 1], xl=c(0, 15), yl=c(0, 5))
plotWordVec <- function(v1, lbls, xl = NA, yl=NA, ps = NA){
plot(v1, xlim = xl, ylim = yl, pos=ps)
text(v1, labels = lbls)
}
plotWordVec(abfforp_[, 2], lbls = abfforp_[, 1], xl=c(0, 15), yl=c(0, 5), ps=2)
help('text')
plotWordVec <- function(v1, lbls, xl = NA, yl=NA, ps = NA, cx = NA){
plot(v1, xlim = xl, ylim = yl)
text(v1, labels = lbls, pos=ps, cex = cx)
}
plotWordVec(abfforp_[, 2], lbls = abfforp_[, 1], xl=c(0, 15), yl=c(0, 5), ps=2, cx = 0.75)
plotWordVec(abfforp_[, 2], lbls = abfforp_[, 1], xl=c(0, 15), yl=c(0, 5), ps=1, cx = 0.75)
plotWordVec(abfforp_[, 2], lbls = abfforp_[, 1], xl=c(0, 15), yl=c(0, 5), ps=3, cx = 0.75)
